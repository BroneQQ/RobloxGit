-- === GamePassHandler v1.0 ===
-- SKOPIUJ TO DO: ServerScriptService > GamePassHandler (Script)

local MarketplaceService = game:GetService("MarketplaceService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- WA≈ªNE: ZMIE≈É NA PRAWDZIWE ID GAMEPASS'√ìW!
-- System 7 poziom√≥w backpack upgrade
local BACKPACK_GAMEPASS_IDS = {
    [1] = 123456789, -- Poziom 1: +10 slot√≥w (39 total) - 199 Robux
    [2] = 123456790, -- Poziom 2: +10 slot√≥w (49 total) - 249 Robux
    [3] = 123456791, -- Poziom 3: +10 slot√≥w (59 total) - 299 Robux
    [4] = 123456792, -- Poziom 4: +10 slot√≥w (69 total) - 349 Robux
    [5] = 123456793, -- Poziom 5: +10 slot√≥w (79 total) - 399 Robux
    [6] = 123456794, -- Poziom 6: +10 slot√≥w (89 total) - 449 Robux
    [7] = 123456795  -- Poziom 7: +10 slot√≥w (99 total) - 499 Robux
}

-- Koszty dla ka≈ºdego poziomu
local BACKPACK_COSTS = {
    [1] = 199, [2] = 249, [3] = 299, [4] = 349,
    [5] = 399, [6] = 449, [7] = 499
}

-- Stw√≥rz RemoteEvent dla prompt GUI
local showBackpackPromptEvent = Instance.new("RemoteEvent")
showBackpackPromptEvent.Name = "ShowBackpackUpgradePrompt"
showBackpackPromptEvent.Parent = ReplicatedStorage

local purchaseBackpackEvent = Instance.new("RemoteEvent")
purchaseBackpackEvent.Name = "PurchaseBackpackUpgrade"
purchaseBackpackEvent.Parent = ReplicatedStorage

-- Funkcja sprawdzajƒÖca najwy≈ºszy poziom GamePass gracza
local function checkHighestGamePassLevel(player)
    local highestLevel = 0

    for level = 1, 7 do
        local gamePassId = BACKPACK_GAMEPASS_IDS[level]
        if gamePassId then
            local success, hasGamePass = pcall(function()
                return MarketplaceService:UserOwnsGamePassAsync(player.UserId, gamePassId)
            end)

            if success and hasGamePass then
                highestLevel = level
            end
        end
    end

    return highestLevel
end

-- Funkcja aktywujƒÖca poziom Backpack
local function activateBackpackLevel(player, level)
    if player:FindFirstChild("BackpackLevel") then
        player.BackpackLevel.Value = level
        local totalSlots = 29 + (level * 10)

        print("‚úÖ Backpack Level", level, "aktywowany dla gracza:", player.Name, "(" .. totalSlots .. " slot√≥w)")

        -- Wy≈õlij update do klienta
        showBackpackPromptEvent:FireClient(player, {
            type = "level_activated",
            level = level,
            totalSlots = totalSlots,
            message = "Backpack Level " .. level .. " aktywowany! (" .. totalSlots .. " slot√≥w)"
        })

        return true
    end
    return false
end

-- Event handler dla pr√≥by zakupu
purchaseBackpackEvent.OnServerEvent:Connect(function(player, targetLevel)
    targetLevel = targetLevel or 1
    print("üíé Gracz", player.Name, "pr√≥buje kupiƒá Backpack Level", targetLevel)

    -- Sprawd≈∫ czy mo≈ºe kupiƒá ten poziom
    local currentLevel = player.BackpackLevel.Value
    if targetLevel <= currentLevel then
        print("‚ö†Ô∏è Gracz ju≈º ma ten poziom lub wy≈ºszy")
        return
    end

    if targetLevel > 7 then
        print("‚ö†Ô∏è Nieprawid≈Çowy poziom")
        return
    end

    local gamePassId = BACKPACK_GAMEPASS_IDS[targetLevel]
    if not gamePassId then
        print("‚ö†Ô∏è Brak GamePass ID dla poziomu", targetLevel)
        return
    end

    -- Otw√≥rz prompt zakupu
    local success, errorMessage = pcall(function()
        MarketplaceService:PromptGamePassPurchase(player, gamePassId)
    end)

    if not success then
        warn("‚ùå B≈ÇƒÖd przy otwieraniu sklepu:", errorMessage)
        showBackpackPromptEvent:FireClient(player, {
            type = "error",
            message = "B≈ÇƒÖd przy otwieraniu sklepu. Spr√≥buj ponownie."
        })
    end
end)

-- Event handler dla zako≈Ñczenia zakupu
MarketplaceService.PromptGamePassPurchaseFinished:Connect(function(player, gamePassId, wasPurchased)
    -- Znajd≈∫ kt√≥ry poziom zosta≈Ç kupiony
    local purchasedLevel = nil
    for level, id in pairs(BACKPACK_GAMEPASS_IDS) do
        if id == gamePassId then
            purchasedLevel = level
            break
        end
    end

    if purchasedLevel then
        if wasPurchased then
            print("üéâ Gracz", player.Name, "kupi≈Ç Backpack Level", purchasedLevel .. "!")
            activateBackpackLevel(player, purchasedLevel)
        else
            print("‚ùå Gracz", player.Name, "anulowa≈Ç zakup Backpack Level", purchasedLevel)
            showBackpackPromptEvent:FireClient(player, {
                type = "cancelled",
                message = "Zakup anulowany"
            })
        end
    end
end)

-- Sprawd≈∫ GamePass przy do≈ÇƒÖczeniu gracza
Players.PlayerAdded:Connect(function(player)
    -- Poczekaj na za≈Çadowanie danych
    player:WaitForChild("BackpackLevel")

    -- Sprawd≈∫ czy gracz ma GamePassy (mo≈ºe kupi≈Ç wcze≈õniej)
    wait(2) -- Poczekaj na pe≈Çne za≈Çadowanie

    local currentLevel = player.BackpackLevel.Value
    local highestOwnedLevel = checkHighestGamePassLevel(player)

    if highestOwnedLevel > currentLevel then
        print("üîç Gracz", player.Name, "ma GamePass Level", highestOwnedLevel, "- aktywujƒô")
        activateBackpackLevel(player, highestOwnedLevel)
    end
end)

print("‚úÖ GamePassHandler za≈Çadowany")
print("üéÆ System 7 poziom√≥w Backpack Upgrade")
print("üìä Poziomy: 29‚Üí39‚Üí49‚Üí59‚Üí69‚Üí79‚Üí89‚Üí99 slot√≥w")
print("üí∞ Ceny: 199, 249, 299, 349, 399, 449, 499 Robux")
